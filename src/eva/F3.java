package eva;

import javax.swing.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import org.json.JSONObject;

public class F3 extends javax.swing.JFrame {

    private DefaultListModel<String> listModel;
    private F2 historialFrame;

    public F3() {
        initComponents();
        listModel = new DefaultListModel<>();
        jList1.setModel(listModel);

        setLocationRelativeTo(null);

    }

    public F3(F2 historialFrame) {
        this.historialFrame = historialFrame;
        initComponents();
        listModel = new DefaultListModel<>();
        jList1.setModel(listModel);

        setLocationRelativeTo(null);
    }

    private void copiarMensajesRecursivo(String[] nuevaConversacion, int index) {
        if (index >= listModel.getSize()) { // Caso base: si index es igual al tamaño del listModel, terminar la recursión
            return;
        }
        nuevaConversacion[index] = listModel.getElementAt(index);// Copiar el mensaje en el índice actual
        copiarMensajesRecursivo(nuevaConversacion, index + 1); // Llamada recursiva con el siguiente índice
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnfin = new javax.swing.JButton();
        btnatras = new javax.swing.JButton();
        txtbot = new javax.swing.JTextField();
        btnenviar = new javax.swing.JButton();
        jList2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(229, 115, -1, -1));

        btnfin.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        btnfin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eva/minus.png"))); // NOI18N
        btnfin.setBorderPainted(false);
        btnfin.setContentAreaFilled(false);
        btnfin.setFocusable(false);
        btnfin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnfinMouseClicked(evt);
            }
        });
        btnfin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnfinActionPerformed(evt);
            }
        });
        jPanel1.add(btnfin, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 120, 90, 40));

        btnatras.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        btnatras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eva/back.png"))); // NOI18N
        btnatras.setBorderPainted(false);
        btnatras.setContentAreaFilled(false);
        btnatras.setFocusable(false);
        btnatras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnatrasMouseClicked(evt);
            }
        });
        jPanel1.add(btnatras, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, 90, 40));

        txtbot.setFont(new java.awt.Font("Ebrima", 2, 14)); // NOI18N
        txtbot.setText("Escribir mensaje a Eva...");
        txtbot.setBorder(null);
        txtbot.setDragEnabled(true);
        txtbot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbotActionPerformed(evt);
            }
        });
        jPanel1.add(txtbot, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 470, 190, 30));

        btnenviar.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        btnenviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/eva/send24.png"))); // NOI18N
        btnenviar.setBorder(null);
        btnenviar.setBorderPainted(false);
        btnenviar.setContentAreaFilled(false);
        btnenviar.setFocusable(false);
        btnenviar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnenviarMouseClicked(evt);
            }
        });
        jPanel1.add(btnenviar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 470, 80, 30));

        jList2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jList1.setBorder(null);
        jList1.setFont(new java.awt.Font("Ebrima", 0, 14)); // NOI18N
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList2.setViewportView(jList1);

        jPanel1.add(jList2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 170, 330, 290));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/3.jpg"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 450, 550));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 460, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnfinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnfinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnfinActionPerformed

    private void btnfinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnfinMouseClicked
        // Crear una nueva lista de conversaciones para el historial si no existe
        if (historialFrame == null) {
            ArrayList<String[]> historialConversaciones = new ArrayList<>();
            historialFrame = new F2(historialConversaciones);
        }
        String[] nuevaConversacion = new String[listModel.getSize()]; // Crear una nueva conversación de tamaño listModel.getSize()
        copiarMensajesRecursivo(nuevaConversacion, 0); // Llamar al método recursivo para copiar los mensajes en nuevaConversacion
        historialFrame.agregarConversacion(nuevaConversacion);// Añadir la conversación al historial y abrir `F2`
        historialFrame.setVisible(true);
        dispose();// Cerrar la ventana actual de `F3`
    }//GEN-LAST:event_btnfinMouseClicked

    private void btnatrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnatrasMouseClicked
        F1 frame = new F1(); // Crea una nueva instancia de F2
        frame.setVisible(true); // Hace visible el JFrame F2
        frame.setLocationRelativeTo(null); // Centra el JFrame F2 en la pantalla
        dispose();
    }//GEN-LAST:event_btnatrasMouseClicked

    private void btnenviarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnenviarMouseClicked
        String userInput = txtbot.getText();// Obtiene el texto que el usuario ha escrito en el campo de texto 'txtbot'.
        if (!userInput.trim().isEmpty()) {// Verifica que el texto no esté vacío o compuesto solo de espacios.
            listModel.addElement("Tú: " + userInput);// Agrega el mensaje del usuario al modelo de la lista, mostrando quién lo envió (en este caso, "Tú").
            txtbot.setText("");// Limpia el campo de texto del cuadro de entrada para que esté listo para el siguiente input del usuario.
            new SwingWorker<Void, String>() {// Aquí se inicia un SwingWorker, que permite ejecutar código en segundo plano sin bloquear la interfaz gráfica.
                @Override
                protected Void doInBackground() throws Exception {
                    // Establece el nombre del modelo que se usará en la solicitud (en este caso, "llama3.2").
                    String modelName = "llama3.2";
                    // Toma el input del usuario que será enviado como prompt al servidor.
                    String promptText = userInput;
                    try {
                        // Establece la URL a la que se va a hacer la solicitud HTTP POST (servidor local en el puerto 11434).
                        URL url = new URL("http://localhost:11434/api/generate");
                        // Configura la conexión HTTP para realizar una solicitud POST.
                        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                        conn.setRequestMethod("POST"); // Define el método POST.
                        conn.setRequestProperty("Content-Type", "application/json; utf-8"); // Define el tipo de contenido como JSON.
                        conn.setRequestProperty("Accept", "application/json"); // Especifica que espera recibir una respuesta en formato JSON.
                        conn.setDoOutput(true);// Habilita el envío de datos en el cuerpo de la solicitud.
                        // Crea el cuerpo de la solicitud en formato JSON con el modelo y el texto del usuario.
                        String jsonInputString = String.format(
                                "{\"model\": \"%s\", \"prompt\": \"%s\", \"stream\": false}", modelName, promptText);
                        System.out.println("JSON Input: " + jsonInputString);// Imprime el JSON enviado para depuración.
                        try ( OutputStream os = conn.getOutputStream()) { // Envío de los datos a través del flujo de salida.
                            byte[] input = jsonInputString.getBytes(StandardCharsets.UTF_8);
                            os.write(input, 0, input.length);// Envía el cuerpo de la solicitud.
                        }
                        int responseCode = conn.getResponseCode(); // Lee el código de respuesta del servidor (200 si la solicitud fue exitosa).
                        if (responseCode == HttpURLConnection.HTTP_OK) {// Si la respuesta es exitosa, lee el cuerpo de la respuesta.
                            BufferedReader in = new BufferedReader(new InputStreamReader(
                                    conn.getInputStream(), StandardCharsets.UTF_8));
                            StringBuilder response = new StringBuilder();
                            String line;
                            while ((line = in.readLine()) != null) { // Lee la respuesta línea por línea.
                                response.append(line);
                            }
                            in.close();// Cierra el flujo de entrada.
                            JSONObject jsonResponse = new JSONObject(response.toString());// Convierte la respuesta en un objeto JSON y extrae el texto de respuesta.
                            String responseText = jsonResponse.getString("response");
                            // Publica el texto generado (respuestas de la IA) para ser procesado más adelante.
                            publish("Eva: " + responseText);
                        } else {
                            // Publica un mensaje de error si el código de respuesta no es 200 (ok)
                            publish("Error: Código de respuesta " + responseCode);
                        }
                    } catch (IOException e) {
                        // Si ocurre una excepción durante la solicitud, publica el mensaje de error.
                        publish("Error: " + e.getMessage());
                    }
                    return null;
                }

                @Override
                protected void process(java.util.List<String> chunks) {
                    // El método 'process' se llama cuando se invoca 'publish'.
                    // Toma los fragmentos publicados (respuestas o errores) y los añade al modelo de la lista.
                    for (String message : chunks) {
                        SwingUtilities.invokeLater(() -> listModel.addElement(message)); // Añade el mensaje a la lista
                    }
                }
            }.execute();  // Ejecuta el SwingWorker, iniciando la tarea en segundo plano.
        }
    }//GEN-LAST:event_btnenviarMouseClicked

    private void txtbotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbotActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnatras;
    private javax.swing.JButton btnenviar;
    private javax.swing.JButton btnfin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtbot;
    // End of variables declaration//GEN-END:variables
}
